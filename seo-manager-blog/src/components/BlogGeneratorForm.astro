---
// Blog generator form component
---

<div class="max-w-4xl mx-auto">
  <!-- Header Section -->
  <div class="text-center mb-12">
    <h1 class="text-4xl font-bold text-gray-900 mb-4">
      Generate SEO-Optimized Blog Posts
    </h1>
    <p class="text-xl text-gray-600 max-w-2xl mx-auto">
      Use AI to create comprehensive, engaging blog posts tailored to your keywords and audience.
    </p>
  </div>

  <!-- Main Form -->
  <div class="card p-8 mb-8">
    <form id="blog-generator-form" class="space-y-6">
      <div class="grid md:grid-cols-2 gap-6">
        <div>
          <label for="topic" class="block text-sm font-semibold text-gray-900 mb-3">
            Blog Topic *
          </label>
          <input
            type="text"
            id="topic"
            name="topic"
            required
            placeholder="e.g., Best practices for web development"
            class="input text-base"
          />
          <p class="text-xs text-gray-500 mt-2">
            Enter the main subject or theme for your blog post
          </p>
        </div>

        <div>
          <label for="keyword" class="block text-sm font-semibold text-gray-900 mb-3">
            SEO Keyword *
          </label>
          <input
            type="text"
            id="keyword"
            name="keyword"
            required
            placeholder="e.g., web development best practices"
            class="input text-base"
          />
          <p class="text-xs text-gray-500 mt-2">
            Primary keyword to optimize the content for search engines
          </p>
        </div>
      </div>

      <div>
        <label for="tone" class="block text-sm font-semibold text-gray-900 mb-3">
          Writing Tone
        </label>
        <select
          id="tone"
          name="tone"
          class="input text-base"
        >
          <option value="professional">Professional - Formal and authoritative</option>
          <option value="casual">Casual - Relaxed and conversational</option>
          <option value="technical">Technical - Detailed and precise</option>
          <option value="friendly">Friendly - Warm and approachable</option>
          <option value="authoritative">Authoritative - Expert and confident</option>
        </select>
        <p class="text-xs text-gray-500 mt-2">
          Choose the tone that best fits your audience and brand voice
        </p>
      </div>

      <div class="flex flex-col gap-4 pt-4" style="gap: var(--space-4);">
        <button
          type="submit"
          id="generate-btn"
          class="btn btn-primary btn-lg flex items-center justify-center gap-2"
        >
          <svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
          </svg>
          Generate Blog Post (It takes a few minutes)
        </button>

        <!-- <button
          type="button"
          id="generate-sync-btn"
          class="btn btn-secondary btn-lg flex items-center justify-center gap-2"
        >
          <svg style="width: 1.25rem; height: 1.25rem;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          Generate (Sync)
        </button> -->
      </div>
    </form>

  </div>

  <!-- Progress indicator -->
  <div id="progress-container" class="progress-container hidden">
    <div class="flex items-center justify-between mb-4">
      <div class="flex items-center gap-3">
        <div class="spinner"></div>
        <span id="progress-text" class="text-lg font-medium text-gray-900">Generating blog post...</span>
      </div>
      <span id="progress-percentage" class="text-lg font-bold" style="color: var(--primary-600);">0%</span>
    </div>
    <div class="progress-bar">
      <div id="progress-bar" class="progress-fill" style="width: 0%"></div>
    </div>
    <p class="text-sm text-gray-600 mt-3 text-center">
      This may take a few minutes. Please don't close this tab.
    </p>
  </div>

  <!-- Success message -->
  <div id="success-container" class="success-message hidden">
    <div class="text-center">
      <div style="width: 4rem; height: 4rem; margin: 0 auto var(--space-4); background: var(--green-100); border-radius: var(--radius-full); display: flex; align-items: center; justify-content: center;">
        <svg style="width: 2rem; height: 2rem; color: var(--green-600);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
      </div>
      <h3 class="text-2xl font-bold text-gray-900 mb-2">Post generated successfully!</h3>
  </div>

  <!-- Error message -->
  <div id="error-container" class="error-message hidden">
    <div class="flex items-start gap-3">
      <div style="width: 1.5rem; height: 1.5rem; color: var(--red-600); flex-shrink: 0;">
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <div>
        <h4 class="text-lg font-semibold mb-1" style="color: var(--red-800);">Generation Failed</h4>
        <p style="color: var(--red-700);" id="error-message"></p>
      </div>
    </div>
  </div>

  <!-- Features/Tips Section -->
  <div class="mt-12 grid md:grid-cols-3 gap-6">
    <div class="text-center">
      <div style="width: 3rem; height: 3rem; margin: 0 auto var(--space-3); background: var(--primary-100); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center;">
        <svg style="width: 1.5rem; height: 1.5rem; color: var(--primary-600);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <h3 class="text-sm font-semibold text-gray-900 mb-1">SEO Optimized</h3>
      <p class="text-xs text-gray-600">
        Every post includes proper meta descriptions and keyword optimization
      </p>
    </div>

    <div class="text-center">
      <div style="width: 3rem; height: 3rem; margin: 0 auto var(--space-3); background: var(--primary-100); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center;">
        <svg style="width: 1.5rem; height: 1.5rem; color: var(--primary-600);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
        </svg>
      </div>
      <h3 class="text-sm font-semibold text-gray-900 mb-1">AI-Powered</h3>
      <p class="text-xs text-gray-600">
        Advanced AI creates comprehensive, well-researched content
      </p>
    </div>

    <div class="text-center">
      <div style="width: 3rem; height: 3rem; margin: 0 auto var(--space-3); background: var(--primary-100); border-radius: var(--radius-lg); display: flex; align-items: center; justify-content: center;">
        <svg style="width: 1.5rem; height: 1.5rem; color: var(--primary-600);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <h3 class="text-sm font-semibold text-gray-900 mb-1">Time Saving</h3>
      <p class="text-xs text-gray-600">
        Generate quality content in minutes instead of hours
      </p>
    </div>
  </div>
</div>

<script>
  import { apiService } from '../services/api.ts';

  const form = document.getElementById('blog-generator-form') as HTMLFormElement;
  const generateBtn = document.getElementById('generate-btn') as HTMLButtonElement;
  // const generateSyncBtn = document.getElementById('generate-sync-btn') as HTMLButtonElement;
  const progressContainer = document.getElementById('progress-container') as HTMLDivElement;
  const progressBar = document.getElementById('progress-bar') as HTMLDivElement;
  const progressText = document.getElementById('progress-text') as HTMLSpanElement;
  const progressPercentage = document.getElementById('progress-percentage') as HTMLSpanElement;
  const errorContainer = document.getElementById('error-container') as HTMLDivElement;
  const errorMessage = document.getElementById('error-message') as HTMLParagraphElement;
  const successContainer = document.getElementById('success-container') as HTMLDivElement;

  function showError(message: string) {
    errorMessage.textContent = message;
    errorContainer.classList.remove('hidden');
  }

  function hideError() {
    errorContainer.classList.add('hidden');
  }

  function showSuccess() {
    form.classList.add('hidden');
    successContainer.classList.remove('hidden');
  }

  function hideSuccess() {
    successContainer.classList.add('hidden');
    form.classList.remove('hidden');
  }

  function showProgress() {
    progressContainer.classList.remove('hidden');
  }

  function hideProgress() {
    progressContainer.classList.add('hidden');
  }

  function updateProgress(progress: number, text: string) {
    progressBar.style.width = `${progress}%`;
    progressPercentage.textContent = `${progress}%`;
    progressText.textContent = text;
  }

  function disableButtons() {
    generateBtn.disabled = true;
    //generateSyncBtn.disabled = true;
  }

  function enableButtons() {
    generateBtn.disabled = false;
    //generateSyncBtn.disabled = false;
  }

  // Async generation
  generateBtn.addEventListener('click', async (e) => {
    e.preventDefault();
    hideError();

    const formData = new FormData(form);
    const request = {
      topic: formData.get('topic') as string,
      keyword: formData.get('keyword') as string,
      tone: formData.get('tone') as string,
    };

    if (!request.topic.trim() || !request.keyword.trim()) {
      showError('Please fill in both topic and keyword fields.');
      return;
    }

    try {
      disableButtons();
      showProgress();
      updateProgress(0, 'Starting blog generation...');

      const jobResponse = await apiService.startBlogGeneration(request);
      updateProgress(10, 'Blog generation started...');

      const result = await apiService.pollJobUntilComplete(jobResponse.job_id, (status) => {
        const progress = status.progress || 0;
        const message = status.message || 'Generating blog post...';
        updateProgress(progress, message);
      });

      //updateProgress(100, 'Blog post generated successfully!');
      //hideProgress();
      //showSuccess();

      // Store the result for the blog post page
      sessionStorage.setItem(`blog_post_${result.generation_id}`, JSON.stringify(result));
      window.location.href = "/";
    } catch (error) {
      console.error('Error generating blog post:', error);
      showError(error instanceof Error ? error.message : 'An error occurred while generating the blog post.');
      hideProgress();
      enableButtons();
    }
  });

  // Sync generation
  // generateSyncBtn.addEventListener('click', async (e) => {
  //   e.preventDefault();
  //   hideError();

  //   const formData = new FormData(form);
  //   const request = {
  //     topic: formData.get('topic') as string,
  //     keyword: formData.get('keyword') as string,
  //     tone: formData.get('tone') as string,
  //   };

  //   if (!request.topic.trim() || !request.keyword.trim()) {
  //     showError('Please fill in both topic and keyword fields.');
  //     return;
  //   }no

  //   try {
  //     disableButtons();
  //     showProgress();
  //     updateProgress(50, 'Generating blog post synchronously...');

  //     const result = await apiService.generateBlogSync(request);

  //     updateProgress(100, 'Blog post generated successfully!');
  //     hideProgress();
  //     showSuccess();

  //     // Store the result for the blog post page
  //     sessionStorage.setItem(`blog_post_${result.generation_id}`, JSON.stringify(result));

  //     const redirectUrl = result.blog_url || `/blog/${result.topic.toLowerCase().replace(/\s+/g, '-')}`;

  //   } catch (error) {
  //     console.error('Error generating blog post:', error);
  //     showError(error instanceof Error ? error.message : 'An error occurred while generating the blog post.');
  //     hideProgress();
  //     enableButtons();
  //   }
  // });
</script>