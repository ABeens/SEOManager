---
// Blog generator form component
---

<div class="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-lg">
  <h2 class="text-2xl font-bold text-gray-800 mb-6">Generate SEO Blog Post</h2>

  <form id="blog-generator-form" class="space-y-4">
    <div>
      <label for="topic" class="block text-sm font-medium text-gray-700 mb-2">
        Blog Topic *
      </label>
      <input
        type="text"
        id="topic"
        name="topic"
        required
        placeholder="e.g., Best practices for web development"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      />
    </div>

    <div>
      <label for="keyword" class="block text-sm font-medium text-gray-700 mb-2">
        SEO Keyword *
      </label>
      <input
        type="text"
        id="keyword"
        name="keyword"
        required
        placeholder="e.g., web development best practices"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      />
    </div>

    <div>
      <label for="tone" class="block text-sm font-medium text-gray-700 mb-2">
        Writing Tone
      </label>
      <select
        id="tone"
        name="tone"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      >
        <option value="professional">Professional</option>
        <option value="casual">Casual</option>
        <option value="technical">Technical</option>
        <option value="friendly">Friendly</option>
        <option value="authoritative">Authoritative</option>
      </select>
    </div>

    <div class="flex gap-4">
      <button
        type="submit"
        id="generate-btn"
        class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        Generate Blog Post
      </button>

      <button
        type="button"
        id="generate-sync-btn"
        class="flex-1 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        Generate (Sync)
      </button>
    </div>
  </form>

  <!-- Progress indicator -->
  <div id="progress-container" class="mt-6 hidden">
    <div class="flex justify-between text-sm text-gray-600 mb-2">
      <span id="progress-text">Generating blog post...</span>
      <span id="progress-percentage">0%</span>
    </div>
    <div class="w-full bg-gray-200 rounded-full h-2">
      <div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
    </div>
  </div>

  <!-- Success message -->
  <div id="success-container" class="mt-4 p-6 bg-green-50 border border-green-200 rounded-md hidden">
    <div class="text-center">
      <div class="text-green-600 text-4xl mb-4">âœ…</div>
      <h3 class="text-lg font-semibold text-green-800 mb-2">Post generated successfully!</h3>
      <p class="text-green-700">You will be redirected to the blog post shortly...</p>
    </div>
  </div>

  <!-- Error message -->
  <div id="error-container" class="mt-4 p-4 bg-red-50 border border-red-200 rounded-md hidden">
    <p class="text-red-800" id="error-message"></p>
  </div>
</div>

<script>
  import { apiService } from '../services/api.ts';

  const form = document.getElementById('blog-generator-form') as HTMLFormElement;
  const generateBtn = document.getElementById('generate-btn') as HTMLButtonElement;
  const generateSyncBtn = document.getElementById('generate-sync-btn') as HTMLButtonElement;
  const progressContainer = document.getElementById('progress-container') as HTMLDivElement;
  const progressBar = document.getElementById('progress-bar') as HTMLDivElement;
  const progressText = document.getElementById('progress-text') as HTMLSpanElement;
  const progressPercentage = document.getElementById('progress-percentage') as HTMLSpanElement;
  const errorContainer = document.getElementById('error-container') as HTMLDivElement;
  const errorMessage = document.getElementById('error-message') as HTMLParagraphElement;
  const successContainer = document.getElementById('success-container') as HTMLDivElement;

  function showError(message: string) {
    errorMessage.textContent = message;
    errorContainer.classList.remove('hidden');
  }

  function hideError() {
    errorContainer.classList.add('hidden');
  }

  function showSuccess() {
    form.classList.add('hidden');
    successContainer.classList.remove('hidden');
  }

  function hideSuccess() {
    successContainer.classList.add('hidden');
    form.classList.remove('hidden');
  }

  function showProgress() {
    progressContainer.classList.remove('hidden');
  }

  function hideProgress() {
    progressContainer.classList.add('hidden');
  }

  function updateProgress(progress: number, text: string) {
    progressBar.style.width = `${progress}%`;
    progressPercentage.textContent = `${progress}%`;
    progressText.textContent = text;
  }

  function disableButtons() {
    generateBtn.disabled = true;
    generateSyncBtn.disabled = true;
  }

  function enableButtons() {
    generateBtn.disabled = false;
    generateSyncBtn.disabled = false;
  }

  function redirectToBlogPost(generationId: string) {
    window.location.href = `/blog/generated/${generationId}`;
  }

  // Async generation
  generateBtn.addEventListener('click', async (e) => {
    e.preventDefault();
    hideError();

    const formData = new FormData(form);
    const request = {
      topic: formData.get('topic') as string,
      keyword: formData.get('keyword') as string,
      tone: formData.get('tone') as string,
    };

    if (!request.topic.trim() || !request.keyword.trim()) {
      showError('Please fill in both topic and keyword fields.');
      return;
    }

    try {
      disableButtons();
      showProgress();
      updateProgress(0, 'Starting blog generation...');

      const jobResponse = await apiService.startBlogGeneration(request);
      updateProgress(10, 'Blog generation started...');

      const result = await apiService.pollJobUntilComplete(jobResponse.job_id, (status) => {
        const progress = status.progress || 0;
        const message = status.message || 'Generating blog post...';
        updateProgress(progress, message);
      });

      updateProgress(100, 'Blog post generated successfully!');
      hideProgress();
      showSuccess();

      // Store the result for the blog post page
      sessionStorage.setItem(`blog_post_${result.generation_id}`, JSON.stringify(result));

      setTimeout(() => {
        redirectToBlogPost(result.generation_id);
      }, 3000);

    } catch (error) {
      console.error('Error generating blog post:', error);
      showError(error instanceof Error ? error.message : 'An error occurred while generating the blog post.');
      hideProgress();
      enableButtons();
    }
  });

  // Sync generation
  generateSyncBtn.addEventListener('click', async (e) => {
    e.preventDefault();
    hideError();

    const formData = new FormData(form);
    const request = {
      topic: formData.get('topic') as string,
      keyword: formData.get('keyword') as string,
      tone: formData.get('tone') as string,
    };

    if (!request.topic.trim() || !request.keyword.trim()) {
      showError('Please fill in both topic and keyword fields.');
      return;
    }

    try {
      disableButtons();
      showProgress();
      updateProgress(50, 'Generating blog post synchronously...');

      const result = await apiService.generateBlogSync(request);

      updateProgress(100, 'Blog post generated successfully!');
      hideProgress();
      showSuccess();

      // Store the result for the blog post page
      sessionStorage.setItem(`blog_post_${result.generation_id}`, JSON.stringify(result));

      setTimeout(() => {
        redirectToBlogPost(result.generation_id);
      }, 3000);

    } catch (error) {
      console.error('Error generating blog post:', error);
      showError(error instanceof Error ? error.message : 'An error occurred while generating the blog post.');
      hideProgress();
      enableButtons();
    }
  });
</script>

<style>
  /* Tailwind CSS styles are applied via classes */
</style>